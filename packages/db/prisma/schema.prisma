generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid()) @map("_id")
  socketId         String?   @unique
  roomId           String?   @unique
  email            String?   @unique
  password         String?
  username         String?   @unique
  name             String?
  image            String?
  bio              String    @default("Hey there! I am available on ChatApp")
  phone_number     String?   @unique
  pending_friends  String[]  @default([])
  friends          String[]  @default([])
  is_online        Boolean   @default(false)
  is_connected     Boolean   @default(false)
  emailVerified    DateTime?
  verifyCode       String?
  verifyCodeExpiry DateTime?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  Account          Account[]

  @@map("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Chat {
  id          String   @id @default(cuid()) @map("_id")
  sender_id   String
  receiver_id String
  message     String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("chats")
}

model FriendRequest {
  id          String   @id @default(cuid()) @map("_id")
  sender_id   String
  receiver_id String
  status      String   @default("pending")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("friend_requests")
}

model GroupModel {
  id         String   @id @default(cuid()) @map("_id")
  creator_id String
  name       String
  image      String?
  members    String[]
  limit      Int      @default(10)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("groups")
}

model GroupChat {
  id        String   @id @default(cuid()) @map("_id")
  group_id  String
  sender_id String
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model GroupMember {
  id        String   @id @default(cuid()) @map("_id")
  group_id  String
  user_id   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
